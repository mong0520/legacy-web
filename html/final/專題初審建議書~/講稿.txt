各位老師、各位同學大家好：
接下來是我們這組的專題期初發表，我們所研究的主題是「網路服務時代的系統整合開發」。我們的指導老師是戚玉樑老師。

首先是專案的緣起，大家都知道，目前的網際網路處在一個分散式的架構下，各式各樣的網路資訊充斥在這個分散環境下，使用者可以在任何時間、任何地點取得他們想得到的資訊，這樣看來網路似乎很方便且快速，但是就資料的分佈狀況來說，假使當使用者想要取得他們要的資訊時，他們往往需要經過許多步驟才可得到，不僅耗時而且搜尋的動作也過於繁瑣。因此資料便成為了所謂的世界性資料，什麼是世界性資料呢？舉例來說：當你想要出國旅遊時，你可能會上網查詢各個航空公司的航班資訊、機票價格、飯店住宿資訊、當地天氣狀況...等等，而這些你想取得的資訊卻分佈在不同的地方，你必須一個一個從各個搜尋引擊找尋這些資訊，花費的時間讓使用者望之怯步，正因如此資源閒置的問題便產生了。「整合」因此成為目前急欲解決的目標。

接下來，我們先為大家介紹整合的三個層次，由上往下來看，分別為1.資料整合2.應用系統整合3.硬體平台及作業系統。1.資料整合，由於早期沒有一個共通的標準機制，去規範資料整合的技術，所以資料交換的技術太過侷限，成本也相對較高，例如：電子資料交換技術(EDI)，但應用僅止於少數的政府機關、大型企業、銀行。不過，在1998年底，網際網路組織W3C公布了XML1.0 Recommendation，在這套共通的標準下，資料交換的瓶頸解決了，相對的資料整合也不再是問題。3.硬體平台及作業系統整合，因為微軟與Unix的作業系統無法完全相容，所以相對的，彼此作業系統上的應用系統也就跟著無法相容。所以我們所研究的方向，將會定位在應用系統與應用系統間的整合。

傳統的應用系統整合大至分為三種，1.建立「統一入口網站」2.遠端程式操控程序(RMI) 3.中介軟體(Middleware)。 1.建立「統一入口網站」，他是以純鏈結的方式，將各個網路服務的網址統一收集在一個網站上，可是對使用者來說，是沒有什麼效益的，因為當使用者要使用這個統一入口網站上所看到網路服務時，使用者還是需要個別的去開啟各個服務 第2.個 遠端程式操控程序(RMI)，他是以呼叫的方式去啟動遠端的網路服務，可是他有一個限制，就是彼此網路服務的系統平台要一致，才可以使用遠端程式操控程序(RMI)。第3. 中介軟體(Middleware)，他不必顧慮到兩個網路服務應用系統的平台是否相同的問題，只要透過這個中介軟體，就可以使彼此互相溝通、產生互動，可是還是有問題存在，如果我們以長久經營網站來看，就必須不斷的增加網路服務，每增加一個網路服務，就需要增加中介軟體，這樣的情況，將會產生高成本以及系統複雜度的問題。

總結以上的問題探討，我們整理了下列三點主要問題：
1.異質平台資料相容性問題 
2.利用中介軟體整合，成本過高、基礎建置繁雜
3.系統功能整合擴充效益低

為什麼web services能解決上述問題？因為web services主要是以soap協定來傳送訊息soap本身並沒有自己建立一個傳輸協定而是利用http、smtp、ftp等現行的協定做為傳輸協定因此沒有所謂網路服務與現行架購不相容的問題，再來，soap文件本身就是一種xml格式，而xml又是文字格式也就是ascii code，因為每台電腦都是用一樣的ascii code因此就沒有所謂的平台間不相容的問題，簡單講就是跨平台。UDDI在web services即是扮演一個BORKER的角色，服務的提供者可以將其服務發佈註冊到UDDI上而服務的需求者也可以在UDDI上搜尋所需的服務而這些服務即是以WSDL文件來描述，只要服務的需求者取得WSDL就等於擁有該服務的使用權這種便利的方式相對於傳統一個個去建中介軟體的做法實在是太經濟、又具效率。或許你會覺得像WSDL這種機器讀的文件很難撰寫，所幸apache提供了axis工具(其它還有IBM的WSTK)axis提供了對服務程式產生WSDL文件的工具它也提供了依據WSDL文件進而產生Client/Server端應用程式的工具因此透過web services整合各個應用系統變得更為簡潔這也是傳統做法所無法做到的。

剛才提到的BORKER，即服務的仲介者，以及服務的提供者、服務的需求者，皆位在web services下以服務為導向的三角架構中，簡稱SOA，從圖中可了解，當需求者想要取得某一項服務時，首先他會到服務仲介者搜尋此項服務，而服務的來源即是由圖中服務提供者將其發佈註冊至仲介者而來，在需求者取得WSDL後，便可驅動此項服務，另外在這個架構下所有的信息都是透過SOAP來傳遞。

接下來，我們將Web Services與中介軟體做一個比較，我們會發現，中介軟體，每當一個平台要與另一個平台溝通時，就必須架設一個中介軟體，而Web Services技術，平台只需透過SOAP協定，以xml的訊息傳遞資訊，就可以取得其他平台的服務，大幅減少了開發的成本、時間。

最後，我們將Web Services技術做一個整理，究竟他做了些什麼。
他強調後端系統整合，簡化前端使用者搜尋資訊花費的時間，加強後端系統的複雜性，也就是說，他是加強系統的功能，而不是花時間、成本去開發，使系統可以達到再利用，再來，他提供跨平台的一致互通性 (Interoperability)，還有使應用程式能更簡單的整合網路上的服務，以及具備動態繫結的特色，也就是跳脫了以往的靜態連結網頁方式。

接下來我們將以網路書店實作來驗證web services的幾項特性，圖中看到的是我們建置的MAX書店網站架構圖，首先中間這塊黃色區域是我們所整合的應用系統，包含了書籍資訊、比價機制、購物車、匯率轉換、出貨追蹤、ip位址偵測，這些功能分別來自不同的服務提供者，當中都是從由不同的仲介者搜尋而來的，而我們扮演服務需求者的角色，將不同的服務整合至MAX書店來，也算是實現了以服務為導向的三角架構。

在看完MAX網路書店架構圖後，底下是我們所提供的幾個系統功能：
1. 書籍相關資訊 - 由Amazon提供的服務取得 
2. 比價機制 
   書價 - 透過ISBN(國際標準圖書編號)向Amazon、Barnes&Noble、Academic等網路書店提供的服務取得不同的書價進行比價。
3. 匯率即時轉換 - 在取得書價的同時向X-methods所提供的匯率即時轉換服務將書價轉成當地的幣值。
4. 購物車 - 在使用者想訂購Amazon書店的書籍時，可以透過購物車的功能在我們的MAX書店直接加入。
5. 出貨狀況追蹤 – 在使用者確定下單時，透過FedEx、UPS、USPS等運輸商提供的服務，可以在MAX書店中直接掌握貨品出貨狀況，不必再到運輸商的網站查詢。
由於目前是以達成以服務為導向為主，因此購物車及出貨狀況追蹤等服務會在下一階段繼續進行。接下來為你展示我們的MAX網路書店運作模式。